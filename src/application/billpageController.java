package application;

import javafx.fxml.FXML;
import application.DBAction;
import javafx.fxml.FXMLLoader;
import javafx.scene.Node;
import javafx.scene.Parent;
import javafx.scene.Scene;
import javafx.scene.control.Button;
import javafx.scene.control.Label;
import javafx.stage.Stage;
import static application.DBUtils.current_order;
import static application.DBUtils.current_username;
import static application.cartpageController.retrieveColdQty;
import static application.cartpageController.retrieveCappQty;
import static application.cartpageController.retrieveLattQty;
import static application.cartpageController.retrieveMochQty;
import static application.cartpageController.retrieveHotcQty;
import static application.cartpageController.ipcold;
import static application.cartpageController.ipcapp;
import static application.cartpageController.iplatt;
import static application.cartpageController.ipcold;
import static application.cartpageController.ipcold;


import java.io.IOException;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

import javafx.event.ActionEvent;

public class billpageController {
	    @FXML
	    private Button button_pay;
	
	    @FXML
	    private Label capp_amt;

	    @FXML
	    private Label capp_pri;

	    @FXML
	    private Label capp_qty;

	    @FXML
	    private Label latt_amt;

	    @FXML
	    private Label latt_pri;

	    @FXML
	    private Label latt_qty;

	    @FXML
	    private Label cold_amt;

	    @FXML
	    private Label cold_pri;
	    
	    @FXML
		private Label cold_qty;

	    @FXML
	    private Label hotc_amt;
	    
	    @FXML
	    private Label hotc_pri;

	    @FXML
	    private Label hotc_qty;

	    @FXML
	    private Label lab_total;

	    @FXML
	    private Label moch_amt;
	    
	    @FXML
	    private Label moch_pri;

	    @FXML
	    private Label moch_qty;
	    
	    @FXML
	    private Button button_update;

	// Event Listener on Button[#button_pay].onAction
	@FXML
	public void onclick_pay(ActionEvent event) throws IOException {
		// TODO Autogenerated
		Parent submit_parent = FXMLLoader.load(getClass().getResource("abtpage.fxml"));
   		Scene submit_scene = new Scene(submit_parent);
   		Stage app_stage = (Stage) ((Node) event.getSource()).getScene().getWindow();
   		app_stage.setScene(submit_scene);
   		app_stage.show();
		
		}
	
	public void onclick_update(ActionEvent event) throws IOException {
		
		int amtCold = 0;
		int amtCapp = 0;
		int amtLatt = 0;
		int amtMoch = 0;
		int amtHotc = 0;
		
		cold_qty.setText(retrieveColdQty);
		capp_qty.setText(retrieveCappQty);
		latt_qty.setText(retrieveLattQty);
		moch_qty.setText(retrieveMochQty);
		hotc_qty.setText(retrieveHotcQty);
		
		int qtyCold = convertNullToZero(retrieveColdQty);
		int qtyCapp = convertNullToZero(retrieveCappQty);
		int qtyLatt = convertNullToZero(retrieveLattQty);
		int qtyMoch = convertNullToZero(retrieveMochQty);
		int qtyHotc = convertNullToZero(retrieveHotcQty);
		
		int priceCold = convertNullToZero(cartpageController.getPrice(1));
		int priceCapp = convertNullToZero(cartpageController.getPrice(2));
		int priceLatt = convertNullToZero(cartpageController.getPrice(3));
		int priceMoch = convertNullToZero(cartpageController.getPrice(4));
		int priceHotc = convertNullToZero(cartpageController.getPrice(5));
		
		if(retrieveColdQty.isEmpty()) {
			
		}else {
			cold_pri.setText(cartpageController.getPrice(1));
			amtCold = qtyCold * priceCold;
			cold_amt.setText("" + amtCold);
		}
		//
        if(retrieveCappQty.isEmpty()) {
			
		}else {
			capp_pri.setText(cartpageController.getPrice(2));
		    amtCapp = qtyCapp * priceCapp;
			capp_amt.setText("" + amtCapp);
		}
        //
        if(retrieveLattQty.isEmpty()) {
			
		}else {
			latt_pri.setText(cartpageController.getPrice(3));
			amtLatt = qtyLatt * priceLatt;
			latt_amt.setText("" + amtLatt);
		}
        //
        if(retrieveMochQty.isEmpty()) {
			
		}else {
			moch_pri.setText(cartpageController.getPrice(4));
			amtMoch = qtyMoch * priceMoch;
			moch_amt.setText("" + amtMoch);
		}
        
        if(retrieveHotcQty.isEmpty()) {
			
		}else {
			hotc_pri.setText(cartpageController.getPrice(5));
		    amtHotc = qtyHotc * priceHotc;
			hotc_amt.setText("" + amtHotc);
		}
        
        int total = amtCold + amtCapp + amtLatt + amtMoch + amtHotc;
        
        //change int to string using concatenation
        lab_total.setText("" + total);
        
        String query = "INSERT INTO bills(username, total) VALUES (? , ?)";
        
        
        
        try {
        	Connection conn = DBUtils.getConnection();
            PreparedStatement pstmt = conn.prepareStatement(query);
			pstmt.setString(1, current_username);
			pstmt.setLong(2, total);
		    pstmt.executeUpdate();
		    
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
       
	}
	
	public int convertNullToZero(String nvar) {
		//System.out.println(nvar);
		//System.out.println("er");
		if(nvar.isEmpty()) {
			//System.out.println("err");
			return 0;
		} else {
			//int validVariable = Integer.parseInt(nvar);
			int validVariable = Integer.valueOf(nvar);
			return validVariable;
		}
	
	
	
}
}
	

	
